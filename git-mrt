#!/bin/bash

# Exit with return code
# $1 - message to output in stderr
# $2 - return code
function die() {
    echo "$1" >&2
    exit ${2:-1}
}

function usage() {
    printf "Usage: %s [-v] [-x] cmd\n" `basename $0`
    echo "Available commands:"
    echo "  push <beamline tla> <repository> <branch> -"
    echo "            Creates a local copy of the beamline code"
    echo "            repository in ~/.monorepo if not present,"
    echo "            copies the current working repository"
    echo "            to a subfolder <beamline tla>/<repository>," 
    echo "            and pushes to a branch on github labelled" 
    echo "            <beamline tla>/<repository>/<branch>."
    echo "  pull <beamline tla> <repository name> <location> -"
    echo "            Creates a local copy of the beamline code"
    echo "            repository in ~/.monorepo if not present, "
    echo "            and creates a copy of <repository>"
    echo "            belonging to <beamline tla> in <location>,"
    echo "            if possible. If <location> already contains"
    echo "            a git repository, attempts to update it."
    exit 1
}

MRLOC=~/.monorepo
EXTREPOLOC=https://github.com/NSLS2/app-deploy-mono.git
EXTREPONAME=app-deploy-mono
FORCE=false

function sparse_pull_mono() {
    # $1 - subdirectory to sparse-checkout
    [ ! -d $MRLOC ] && mkdir -p $MRLOC
    cd $MRLOC
    [ ! -d $EXTREPONAME ] && git clone --depth 1 --filter=blob:none --sparse $EXTREPOLOC
    cd $EXTREPONAME
    [ ! -d .git ] && die "$MRLOC/$EXTREPONAME exists but is not a git repository, determine the cause manually"
    git sparse-checkout set $1
    git pull
}

function mrt__clone() {
    if [ "$1" ]; then
        local subdirectory=$1
    else
        die 'ERROR: Must specify a subdirectory to use the git mrt clone method.'
    fi
    if [ ! "$TARGET" ]; then
        TARGET=$(pwd)/`basename $subdirectory`
    fi
    [ -d $TARGET ] && die "ERROR: $TARGET already exists, specify an alternative with --target"

    sparse_pull_mono $subdirectory

    [ ! -d $subdirectory ] && die "ERROR: No repository with the directory $subdirectory in $EXTREPONAME"
    git subtree split -P $subdirectory --annotate='(split) ' --rejoin -b $subdirectory/split
    mkdir $TARGET
    cd $TARGET
    git init
    git pull $MRLOC/$EXTREPONAME $subdirectory/split
    echo "$subdirectory" > .mrt
    echo ".mrt" >> .gitignore
}

function mrt__pull() {
    if [ -f .mrt ]; then
        local subdirectory=$(<.mrt)
    else
        die 'ERROR: Cannot use git mrt pull outside of a directory created by git mrt clone.'
    fi
    REPOLOC=$(git rev-parse --show-toplevel)
    
    sparse_pull_mono $subdirectory

    [ ! -d $subdirectory ] && die "No repository with the directory $subdirectory in $EXTREPONAME"
    git subtree split -P $subdirectory --annotate='(split) ' --rejoin -b $subdirectory/split
    cd $REPOLOC
    git pull $MRLOC/$EXTREPONAME $subdirectory/split
}

function mrt__push() {
    if [ -f .mrt ]; then
        local subdirectory=$(<.mrt)
    elif [ "$1" ]; then
        subdirectory=$1
    else
        die 'ERROR: Must specify a subdirectory to use the git mrt push command if not in a directory created by git mrt clone.'
    fi

    BRANCH=$(git rev-parse --abbrev-ref HEAD)
    REPOLOC=$(git rev-parse --show-toplevel)
    
    sparse_pull_mono $subdirectory

    if [ -d $subdirectory ]; then
        git subtree pull -P $subdirectory $REPOLOC $BRANCH
    else
        git subtree add -P $subdirectory $REPOLOC $BRANCH
    fi
    if [ ! $TARGETBRANCH ]; then
        TARGETBRANCH=$subdirectory/$BRANCH
    fi
    EXISTS=$(git branch | grep -w $TARGETBRANCH)
    if [[ $EXISTS ]]; then
        git checkout $TARGETBRANCH
    else
        git checkout -b $TARGETBRANCH
    fi
    git push --set-upstream origin $TARGETBRANCH
    git checkout main
}

function mrt_main() {
    while :; do
        case $1 in
            -h|--help)
                usage
                exit 0
                ;;
            -m|--monolocation)
                if [ "$2" ]; then
                    MRLOC=$2
                    shift 2
                else
                    die 'ERROR: "--monolocation (-m)" requires a non-empty option argument'
                fi
                ;;
            clone|pull|push)
                local cmdname=$1; shift
                "mrt__$cmdname" "$@"
                break
                ;;
            "")
                die 'ERROR: no command is specified'
                ;;
            *)
                die "ERROR: unknown command or option: $1"
                ;;
        esac
    done
}

mrt_main $@